syntax = "proto3";

package api.logic;

option go_package = "github.com/zhihanii/im-pusher/api/logic;logic";

import "api/protocol/message.proto";
import "api/protocol/base.proto";

service Logic {
  rpc Connect(ConnectReq) returns (ConnectReply) {}
  rpc Disconnect(DisconnectReq) returns (DisconnectReply) {}
  rpc Heartbeat(HeartbeatReq) returns (HeartbeatReply) {}
  rpc RenewOnline(OnlineReq) returns (OnlineReply) {}
  rpc Receive(ReceiveReq) returns (ReceiveReply) {}
  rpc Nodes(NodesReq) returns (NodesReply) {}
  rpc Push(PushReq) returns (PushReply) {}

  rpc PushKeys(PushKeysReq) returns (PushKeysReply) {}
  rpc PushMids(PushMidsReq) returns (PushMidsReply) {}
  rpc PushRoom(PushRoomReq) returns (PushRoomReply) {}
  rpc PushAll(PushAllReq) returns (PushAllReply) {}
}

message ConnectReq {
  string server = 1;
  string cookie = 2;
  bytes token = 3;
}

message ConnectReply {
  uint64 member_id = 1;
  string key = 2;
  string room_id = 3;
  repeated int32 accepts = 4;
  int64 heartbeat = 5;
}

message DisconnectReq {
  uint64 member_id = 1;
  string key = 2;
  string server = 3;
}

message DisconnectReply {
  bool has = 1;
}

message HeartbeatReq {
  uint64 member_id = 1;
  string key = 2;
  string server = 3;
}

message HeartbeatReply {

}

message OnlineReq {
  string server = 1;
  map<string,int32> room_count = 2;
}

message OnlineReply {
  map<string,int32> all_room_count = 3;
}

message ReceiveReq {
  uint64 member_id = 1;
  protocol.Message message = 2;
}

message ReceiveReply {
  protocol.Message message = 1;
}

message NodesReq {
  string platform = 1;
  string client_ip = 2;
}

//message NodesReply {
//  repeated Node nodes = 1;
//}
//
//message Node {
//  string id = 1;
//  string hostname = 2;
//  string addr = 3;
//}

message NodesReply {
  string domain = 1;
  int32 tcp_port = 2;
  int32 ws_port = 3;
  int32 wss_port = 4;
  int32 heartbeat = 5;
  repeated string nodes = 6;
  Backoff backoff = 7;
  int32 heartbeat_max = 8;
}

message Backoff {
  int32 max_delay = 1;
  int32 base_delay = 2;
  float factor = 3;
  float jitter = 4;
}

message PushKeysReq {
  int32 op = 1;
  repeated string keys = 2;
  bytes msg = 3;
}

message PushKeysReply {

}

message PushMidsReq {
  int32 op = 1;
  repeated int64 mids = 2;
  bytes msg = 3;
}

message PushMidsReply {

}

message PushRoomReq {
  int32 op = 1;
  string type = 2;
  string room = 3;
  bytes msg = 4;
}

message PushRoomReply {

}

message PushAllReq {
  int32 op = 1;
  int32 speed = 2;
  bytes msg = 3;
}

message PushAllReply {

}

message PushMsg {
  enum Type {
    PUSH = 0;
    ROOM = 1;
    BROADCAST = 2;
  }
  Type type = 1;
  int32 operation = 2;
  int32 speed = 3;
  string server = 4;
  string room = 5;
  repeated string keys = 6;
  bytes msg = 7;
}

message PushReq {
  repeated uint64 receivers = 1;
  bytes message_data = 2; //业务消息
}

message PushReply {
  protocol.BaseReply base_reply = 1;
}
